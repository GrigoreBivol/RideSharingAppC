@model RideSharing.Models.Trip
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Trip</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TimeStamp, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TimeStamp, new { htmlAttributes = new { @class = "datetimepicker" } })
                @Html.ValidationMessageFor(model => model.TimeStamp, "Please select the time ...", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Commission, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Commission, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Commission, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.OriginAddress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.OriginAddress, new { @class = "form-control", @id = "txt_Source" })
                @Html.ValidationMessageFor(model => model.OriginAddress, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.DestAddress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.DestAddress, new { @class = "form-control", @id = "txt_Destination" })
                @Html.ValidationMessageFor(model => model.DestAddress, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.Label("Distance", new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.Label("0", new { @id = "DST", @class = "form-control4" })
                <input type="button" value="Calcul distance " id="calcDist" class="btn btn-default" />
                <br />
                @Html.Label("0", new { @id = "PRICE", @class = "form-control4" })

            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>

}
<div id="map-canvas" style="height: 500px; width:100%;">
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script src="https://maps.googleapis.com/maps/api/js?sensor=false&libraries=geometry,places&key=AIzaSyBm1pln0MedohNSrmCASOeTF9t49xWpaEo"></script>

<script type="text/javascript" src="http://code.jquery.com/jquery-1.5.1.js"></script>


<script type="text/javascript">
    var source, destination;

    var directionsService = new google.maps.DirectionsService();
    google.maps.event.addDomListener(window, 'load', function () {
        new google.maps.places.SearchBox(document.getElementById('txt_Source'));
        new google.maps.places.SearchBox(document.getElementById('txt_Destination'));


    });
</script>
<!--
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
2
<script src="jquery.datetimepicker.js"></script>-->
<script type="text/javascript">
    function initialize() {
        geocoder = new google.maps.Geocoder();
        var latlng = new google.maps.LatLng(-34.397, 150.644);
        var mapOptions = {
            zoom: 8,
            center: latlng
        }
        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
    }
    function calcRoute() {
        var directionsService = new google.maps.DirectionsService();
        var directionsDisplay = new google.maps.DirectionsRenderer();
        var dublin = new google.maps.LatLng(53.2908338, -6.3702191);
        var mapOptions = {
            zoom: 8,
            center: dublin
        }
        var map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
        directionsDisplay.setMap(map);
        var start = document.getElementById('txt_Source').value;
        var end = document.getElementById('txt_Destination').value;
        var request = {
            origin: start,
            destination: end,
            travelMode: 'DRIVING'
        };
        directionsService.route(request, function (result, status) {
            if (status == 'OK') {
                directionsDisplay.setDirections(result);
            }
        });
    }
    function CalculDistance() {

        var start = document.getElementById('txt_Source').value;
        var end = document.getElementById('txt_Destination').value;

        var geocoder = new google.maps.Geocoder();
        var slatitude = "0";
        var slongitude = "0";
        var elatitude = "0";
        var elongitude = "0";

        geocoder.geocode({ 'address': start }, function (results, status) {

            if (status == google.maps.GeocoderStatus.OK) {
                window.slatitude = results[0].geometry.location.lat();
                window.slongitude = results[0].geometry.location.lng();

            }
        });
        geocoder.geocode({ 'address': end }, function (results, status) {

            if (status == google.maps.GeocoderStatus.OK) {
                window.elatitude = results[0].geometry.location.lat();
                window.elongitude = results[0].geometry.location.lng();

            }
        });

        

        var distance = google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(window.slatitude, window.slongitude), new google.maps.LatLng(window.elatitude, window.elongitude));
        var DistKM = (distance / 1000).toFixed(2);
        document.getElementById('DST').innerHTML = DistKM;
        document.getElementById('PRICE').innerHTML = DistKM + " Eur";


    }
    function codeAddress(address) {
        geocoder = new google.maps.Geocoder();

        geocoder.geocode({ 'address': address }, function (results, status) {

            if (status == 'OK') {

                return results[0].geometry.location;

            } else {
                return null;
            }
        });
    }
    function Lat(address) {
        geocoder = new google.maps.Geocoder();

        geocoder.geocode({ 'address': address }, function (results, status) {

            if (status == 'OK') {

                return results[0].geometry.location.lat();

            } else {
                return null;
            }
        });
    }
    function Long(address) {
        geocoder = new google.maps.Geocoder();

        geocoder.geocode({ 'address': address }, function (results, status) {

            if (status == 'OK') {

                return results[0].geometry.location.lng();

            } else {
                return null;
            }
        });
    }
    initialize();


    $('#calcDist').click(function () {

        CalculDistance();
    });

    $('#txt_Source').change(function () {
        CalculDistance();
        calcRoute();//
    });

    $('#txt_Source').click(function () {
        CalculDistance();
        calcRoute();//s
    });

    //$('#txt_Source').mouseout(function () {
    //    CalculDistance();
    //    calcRoute();//s
    //});

    $('#txt_Destination').change(function () {
        CalculDistance();
        calcRoute();//
    });

    $('#txt_Destination').click(function () {
        CalculDistance();
        calcRoute();//
    });
    //$('#txt_Destination').mouseout(function () {
    //    CalculDistance();
    //    calcRoute();//
    //});
</script>


@section scripts{
    <link href="~/Content/jquery.datetimepicker.css" rel="stylesheet" />
    <script src="~/Scripts/jquery.datetimepicker.js"></script>

    <script>
        $(function () {
            $(".datetimepicker").datetimepicker({


            });



        });

    </script>

}

